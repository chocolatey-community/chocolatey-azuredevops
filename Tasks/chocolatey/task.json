{
  "id": "7360ca82-d88f-4188-be8f-88d60ca03f4f",
  "name": "ChocolateyCommand",
  "friendlyName": "Chocolatey",
  "description": "Run various Chocolatey commands, including pack, push, install, upgrade, etc.",
  "author": "gep13",
  "helpMarkDown": "[More Information](https://chocolatey-community.github.io/chocolatey-azuredevops/",
  "category": "Build",
  "visibility": [
    "Build",
    "Release"
  ],
  "demands": [],
  "version": {
    "Major": "0",
    "Minor": "1",
    "Patch": "0"
  },
  "minimumAgentVersion": "1.83.0",
  "groups": [
    {
      "name": "apikeyOptions",
      "displayName": "Options for API Key Command",
      "isExpanded": true,
      "visibleRule": "command = apikey"
    },
    {
      "name": "configOptions",
      "displayName": "Options for Config Command",
      "isExpanded": true,
      "visibleRule": "command = config"
    },
    {
      "name": "customOptions",
      "displayName": "Options for Custom Command",
      "isExpanded": true,
      "visibleRule": "command = custom"
    },
    {
      "name": "featureOptions",
      "displayName": "Options for Feature Command",
      "isExpanded": true,
      "visibleRule": "command = feature"
    },
    {
      "name": "installOptions",
      "displayName": "Options for Install Command",
      "isExpanded": true,
      "visibleRule": "command = install"
    },
    {
      "name": "packOptions",
      "displayName": "Options for Pack Command",
      "isExpanded": true,
      "visibleRule": "command = pack"
    },
    {
      "name": "pushOptions",
      "displayName": "Options for Push Command",
      "isExpanded": true,
      "visibleRule": "command = push"
    },
    {
      "name": "sourceOptions",
      "displayName": "Options for Source Command",
      "isExpanded": true,
      "visibleRule": "command = source"
    },
    {
      "name": "upgradeOptions",
      "displayName": "Options for Upgrade Command",
      "isExpanded": true,
      "visibleRule": "command = upgrade"
    },
    {
      "name": "advancedOptions",
      "displayName": "Advanced Options",
      "isExpanded": false
    }
  ],
  "instanceNameFormat": "Chocolatey $(command)",
  "inputs": [
    {
      "name": "command",
      "type": "pickList",
      "label": "Command",
      "defaultValue": "pack",
      "helpMarkDown": "The Chocolatey command to run. Select 'custom' to use other commands that are available [here](https://chocolatey.org/docs/commands-reference).",
      "required": "true",
      "properties": {
        "EditableOptions": "False"
      },
      "options": {
        "apikey": "apikey",
        "config": "config",
        "custom": "custom",
        "feature": "feature",
        "install": "install",
        "pack": "pack",
        "push": "push",
        "source": "source",
        "upgrade": "upgrade"
      }
    },
    {
      "name": "extraArguments",
      "type": "string",
      "label": "Extra Arguments",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Additional Chocolatey Arguments that are not catered for above.",
      "groupName": "advancedOptions"
    },
    {
      "name": "debug",
      "type": "boolean",
      "label": "Show debug messaging.",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "",
      "groupName": "advancedOptions"
    },
    {
      "name": "verbose",
      "type": "boolean",
      "label": "Show verbose messaging.",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Very verbose messaging, avoid using under normal circumstances.",
      "groupName": "advancedOptions"
    },
    {
      "name": "trace",
      "type": "boolean",
      "label": "Show trace messaging.",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Very, very verbose trace messaging. Avoid except when needing super low-level .NET Framework debugging.",
      "groupName": "advancedOptions"
    },
    {
      "name": "apikeySource",
      "type": "string",
      "label": "Source",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "The source that is associated with the ApiKey.",
      "groupName": "apikeyOptions"
    },
    {
      "name": "apikeyApikey",
      "type": "string",
      "label": "ApiKey",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "The ApiKey that should be used when pushing to the source.",
      "groupName": "apikeyOptions"
    },
    {
      "name": "configOperation",
      "type": "radio",
      "label": "Config Operation",
      "required": true,
      "defaultValue": "set",
      "helpMarkDown": "Choose whether to set or unset a config value.",
      "options": {
        "set": "Set Value",
        "unset": "Unset Value"
      },
      "groupName": "configOptions"
    },
    {
      "name": "configName",
      "type": "pickList",
      "label": "Config Name",
      "defaultValue": "",
      "options": {
        "cacheLocation": "Cache Location",
        "containsLegacyPackageInstalls": "Contains Legacy Package Installs",
        "commandExecutionTimeoutSeconds": "Command Execution Timeout",
        "proxy": "Proxy",
        "proxyUser": "Proxy User",
        "proxyPassword": "Proxy Password",
        "webRequestTimeoutSeconds": "Web Request Timeout",
        "proxyBypassList": "Proxy Bypass List",
        "proxyBypassOnLocal": "Proxy Bypass On Local"
      },
      "required": true,
      "helpMarkDown": "The config name which is going to set or unset.",
      "groupName": "configOptions"
    },
    {
      "name": "configValue",
      "type": "string",
      "label": "Config Value",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "Parameters to pass to the package.",
      "visibleRule": "configOperation=set",
      "groupName": "configOptions"
    },
    {
      "name": "customCommand",
      "type": "string",
      "label": "Command",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "The Chocolatey Command that you would like to execute.",
      "groupName": "customOptions"
    },
    {
      "name": "customArguments",
      "type": "string",
      "label": "Arguments",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Chocolatey Arguments that should be passed to the command.",
      "groupName": "customOptions"
    },
    {
      "name": "featureOperation",
      "type": "radio",
      "label": "Feature Operation",
      "required": true,
      "defaultValue": "enable",
      "helpMarkDown": "Choose whether to enable or disable a feature.",
      "options": {
        "enable": "Enable Feature",
        "disable": "Disable Feature"
      },
      "groupName": "featureOptions"
    },
    {
      "name": "featureName",
      "type": "pickList",
      "label": "Feature Name",
      "defaultValue": "",
      "options": {
        "checkSumFiles": "Checksum Files",
        "autoUninstaller": "Auto Uninstaller",
        "allowGlobalConfirmation": "Allow Global Confirmation",
        "failOnAutoUninstaller": "Fail On Auto Uninstaller",
        "failOnStandardError": "Fail On Standard Error",
        "allowEmptyChecksums": "Allow Empty Checksums",
        "allowEmptyChecksumsSecure": "Allow Empty Checksums Secure",
        "powershellHost": "PowerShell Host",
        "logEnvironmentValues": "Log Environment Values",
        "virusCheck": "Virus Check",
        "failOnInvalidOrMissingLicense": "Fail On Invalid or Missing License",
        "ignoreInvalidOptionsSwitches": "Ignore Invalid Options and Switches",
        "usePackageExitCodes": "Use Package Exit Codes",
        "useFipsCompliantChecksums": "Use FIPS Compliant Checksums",
        "showNonElevatedWarnings": "Show Non Elevated Warnings",
        "showDownloadProgress": "Show Download Progress",
        "stopOnFirstPackageFailure": "Stop On First Package Failure",
        "useRememberedArgumentsForUpgrades": "Use Remembered Arguments",
        "ignoreUnfoundPackagesOnUpgradeOutdated": "Ignore Unfound Packages",
        "removePackageInformationOnUninstall": "Remove Package Information On Uninstall",
        "logWithoutColor": "Log Without Color",
        "scriptsCheckLastExitCode": "Script Check Last Exit Code"
      },
      "required": true,
      "helpMarkDown": "The feature name which is going to be enabled or disabled.",
      "groupName": "featureOptions"
    },
    {
      "name": "installPackageId",
      "type": "string",
      "label": "The id of the package(s) that are to be installed.",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "For example, `windirstat`, or `jre8 urlrewrite`.",
      "groupName": "installOptions"
    },
    {
      "name": "installPackageVersion",
      "type": "string",
      "label": "The version of the package that is to be installed.",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "For example, 1.2.3.",
      "groupName": "installOptions"
    },
    {
      "name": "installPre",
      "type": "boolean",
      "label": "Prerelease.",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Include Prereleases?",
      "groupName": "installOptions"
    },
    {
      "name": "installSource",
      "type": "string",
      "label": "The source to find the package(s) to install.",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Special sources include: ruby, webpi, cygwin, windowsfeatures, and python. To specify more than one source, pass it with a semi-colon separating the values (e.g. \"'source1;source2'\"). Defaults to default feeds.",
      "groupName": "installOptions"
    },
    {
      "name": "installInstallArgs",
      "type": "string",
      "label": "Install Arguments",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Install Arguments to pass to the native installer in the package.",
      "groupName": "installOptions"
    },
    {
      "name": "installParams",
      "type": "string",
      "label": "Package Parameters",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Parameters to pass to the package.",
      "groupName": "installOptions"
    },
    {
      "name": "installForce",
      "type": "boolean",
      "label": "Force the behavior.",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Do not use force during normal operation - it subverts some of the smart behavior for commands.",
      "groupName": "installOptions"
    },
    {
      "name": "installX86",
      "type": "boolean",
      "label": "Force X86.",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Force x86 (32bit) installation on 64 bit systems.",
      "groupName": "installOptions"
    },
    {
      "name": "installOverride",
      "type": "boolean",
      "label": "Override Arguments",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Should install arguments be used exclusively without appending to current package passed arguments?",
      "groupName": "installOptions"
    },
    {
      "name": "packOperation",
      "type": "radio",
      "label": "How many nuspec files?",
      "required": true,
      "defaultValue": "single",
      "helpMarkDown": "Choose whether to pack a single nuspec file, or multiple.",
      "options": {
        "single": "One nuspec file",
        "multiple": "Multiple nuspec files"
      },
      "groupName": "packOptions"
    },
    {
      "name": "packWorkingDirectory",
      "type": "filePath",
      "label": "Working Directory",
      "defaultValue": "$(Build.Repository.LocalPath)",
      "required": true,
      "helpMarkDown": "The location of the nuspec file(s).",
      "groupName": "packOptions"
    },
    {
      "name": "packNuspecFileName",
      "type": "string",
      "label": "NuSpec File Name.",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "The file name of the NuSpec File that should be packed.",
      "visibleRule": "packOperation=single",
      "groupName": "packOptions"
    },
    {
      "name": "packVersion",
      "type": "string",
      "label": "Version",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "The version you would like to insert into the package.",
      "groupName": "packOptions"
    },
    {
      "name": "packOutputDirectory",
      "type": "filePath",
      "label": "Output Directory",
      "defaultValue": "$(Build.ArtifactStagingDirectory)",
      "required": false,
      "helpMarkDown": "The location where the generated nupkg(s) should be placed.",
      "groupName": "packOptions"
    },
    {
      "name": "pushOperation",
      "type": "radio",
      "label": "How many nupkg files?",
      "required": true,
      "defaultValue": "single",
      "helpMarkDown": "Choose whether to pus a single nupkg file, or multiple.",
      "options": {
        "single": "One nupkg file",
        "multiple": "Multiple nupkg files"
      },
      "groupName": "pushOptions"
    },
    {
      "name": "pushWorkingDirectory",
      "type": "filePath",
      "label": "Working Directory",
      "defaultValue": "$(Build.ArtifactStagingDirectory)",
      "required": true,
      "helpMarkDown": "The location of the nupkg file(s).",
      "groupName": "pushOptions"
    },
    {
      "name": "pushNupkgFileName",
      "type": "string",
      "label": "Nupkg File Name.",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "The file name of the Nupkg File that should be pushed.",
      "visibleRule": "pushOperation=single",
      "groupName": "pushOptions"
    },
    {
      "name": "chocolateySourceType",
      "type": "radio",
      "label": "Source to push Chocolatey Packages to",
      "required": true,
      "defaultValue": "manual",
      "helpMarkDown": "This can either be set directly in the Task definition, by setting the source and API Key, but by selecting pre-defined Chocolatey source from your Organisation settings.",
      "options": {
        "manual": "Manual configuration",
        "stored": "Externally stored configuration"
      },
      "groupName": "pushOptions"
    },
    {
      "name": "pushSource",
      "type": "string",
      "label": "Source",
      "defaultValue": "https://push.chocolatey.org/",
      "required": false,
      "helpMarkDown": "The source to push the nupkg(s) to.",
      "groupName": "pushOptions",
      "visibleRule": "chocolateySourceType = manual"
    },
    {
      "name": "pushApikey",
      "type": "string",
      "label": "API Key",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "The API Key that should be used to push the nupkg(s) to specified source.",
      "groupName": "pushOptions",
      "visibleRule": "chocolateySourceType = manual"
    },
    {
      "name": "externalEndpoint",
      "type": "connectedService:ExternalNuGetFeed",
      "label": "Chocolatey server",
      "required": true,
      "helpMarkDown": "The NuGet service connection that contains the external Chocolatey server’s credentials.",
      "groupName": "pushOptions",
      "visibleRule": "chocolateySourceType = stored"
    },
    {
      "name": "pushForce",
      "type": "boolean",
      "label": "Force.",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Force the operation to continue.",
      "groupName": "pushOptions"
    },
    {
      "name": "pushTimeout",
      "type": "string",
      "label": "Timeout",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "The time, in seconds, to allow a package push to occur before timing out.",
      "groupName": "pushOptions"
    },
    {
      "name": "sourceOperation",
      "type": "radio",
      "label": "Source Operation",
      "required": true,
      "defaultValue": "add",
      "helpMarkDown": "Choose whether to add, remove, enable or disable a source.",
      "options": {
        "add": "Add a source",
        "remove": "Remove a source",
        "enable": "Enable a source",
        "disable": "Disable a source"
      },
      "groupName": "sourceOptions"
    },
    {
      "name": "sourceSourceName",
      "type": "string",
      "label": "Name",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "The name to give the Source.",
      "groupName": "sourceOptions"
    },
    {
      "name": "sourceSource",
      "type": "string",
      "label": "Source",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "The name to give the Source.",
      "visibleRule": "sourceOperation=add",
      "groupName": "sourceOptions"
    },
    {
      "name": "sourcePriority",
      "type": "string",
      "label": "Priority",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "The priority order of this source as compared to other sources, lower is better. Defaults to 0 (no priority). All priorities above 0 will be evaluated first, then zero-based values will be evaluated in config file order.",
      "groupName": "sourceOptions"
    },
    {
      "name": "user",
      "type": "string",
      "label": "User",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Used with authenticated feeds.",
      "groupName": "sourceOptions"
    },
    {
      "name": "password",
      "type": "string",
      "label": "Password",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "The user's password to the source. Encrypted in chocolatey.config file.",
      "groupName": "sourceOptions"
    },
    {
      "name": "cert",
      "type": "string",
      "label": "Client Certificate",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "PFX pathname for an x509 authenticated feeds.",
      "groupName": "sourceOptions"
    },
    {
      "name": "certPassword",
      "type": "string",
      "label": "Certificate Password",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "the client certificate's password to the source.",
      "groupName": "sourceOptions"
    },
    {
      "name": "byPassProxy",
      "type": "boolean",
      "label": "Bypass Proxy.",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Should this source explicitly bypass any explicitly or system configured proxies?",
      "groupName": "sourceOptions"
    },
    {
      "name": "upgradePackageId",
      "type": "string",
      "label": "The id of the package(s) that are to be installed.",
      "defaultValue": "",
      "required": true,
      "helpMarkDown": "For example, `windirstat`, or `jre8 urlrewrite`.",
      "groupName": "upgradeOptions"
    },
    {
      "name": "upgradePackageVersion",
      "type": "string",
      "label": "The version of the package that is to be installed.",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "For example, 1.2.3.",
      "groupName": "upgradeOptions"
    },
    {
      "name": "upgradePre",
      "type": "boolean",
      "label": "PreRelease.",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Include PreReleases?",
      "groupName": "upgradeOptions"
    },
    {
      "name": "upgradeSource",
      "type": "string",
      "label": "The source to find the package(s) to install.",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Special sources include: ruby, webpi, cygwin, windowsfeatures, and python. To specify more than one source, pass it with a semi-colon separating the values (e.g. \"'source1;source2'\"). Defaults to default feeds.",
      "groupName": "upgradeOptions"
    },
    {
      "name": "except",
      "type": "string",
      "label": "Except.",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "A comma-separated list of package names that should not be upgraded when upgrading 'all'.",
      "groupName": "upgradeOptions"
    },
    {
      "name": "upgradeInstallArgs",
      "type": "string",
      "label": "Install Arguments",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Install Arguments to pass to the native installer in the package.",
      "groupName": "upgradeOptions"
    },
    {
      "name": "upgradeParams",
      "type": "string",
      "label": "Package Parameters",
      "defaultValue": "",
      "required": false,
      "helpMarkDown": "Parameters to pass to the package.",
      "groupName": "upgradeOptions"
    },
    {
      "name": "upgradeForce",
      "type": "boolean",
      "label": "Force the behavior.",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Do not use force during normal operation - it subverts some of the smart behavior for commands.",
      "groupName": "upgradeOptions"
    },
    {
      "name": "upgradeX86",
      "type": "boolean",
      "label": "Force X86.",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Force x86 (32bit) installation on 64 bit systems.",
      "groupName": "upgradeOptions"
    },
    {
      "name": "upgradeOverride",
      "type": "boolean",
      "label": "Override Arguments",
      "defaultValue": "false",
      "required": false,
      "helpMarkDown": "Should install arguments be used exclusively without appending to current package passed arguments?",
      "groupName": "upgradeOptions"
    }
  ],
  "execution": {
    "PowerShell3": {
      "target": "$(currentDirectory)\\chocolatey.ps1",
      "argumentFormat": "",
      "workingDirectory": "$(currentDirectory)"
    }
  }
}
